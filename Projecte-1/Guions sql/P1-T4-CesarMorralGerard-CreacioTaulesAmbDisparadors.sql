/*DROP TABLE*/

drop table PAIS CASCADE CONSTRAINTS;
drop table ESTIL CASCADE CONSTRAINTS;
drop table ARTISTA CASCADE CONSTRAINTS;
drop table ART_GRUP CASCADE CONSTRAINTS;
drop table REPRODUCCIO CASCADE CONSTRAINTS;
drop table CLIENTS CASCADE CONSTRAINTS;
drop table LLISTA_CONT CASCADE CONSTRAINTS;
drop table LLISTA CASCADE CONSTRAINTS;
drop table ALBUM_CONT CASCADE CONSTRAINTS;
drop table ALBUM CASCADE CONSTRAINTS;
drop table AUTORIA CASCADE CONSTRAINTS;
drop table CANÇO CASCADE CONSTRAINTS;
drop table CATALEG CASCADE CONSTRAINTS;
drop table H_GRUP CASCADE CONSTRAINTS;
drop table ART_IND CASCADE CONSTRAINTS;


/*---------------------------------------------------------------*/
/*Taula PAIS*/



create table PAIS
(
pas_iso VARCHAR2 (2) CONSTRAINT PK_PAIS PRIMARY KEY,
pas_nom VARCHAR2(100) CONSTRAINT UN_PAIS_PAS_NOM UNIQUE
);

/*Taula ESTIL*/



create table ESTIL(
est_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
est_nom VARCHAR2 (100) CONSTRAINT UN_ESTIL_PAS_NOM UNIQUE

);

/*Taula Artista*/



create table ARTISTA 
(
art_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
art_nom VARCHAR2(100) CONSTRAINT UN_ARTISTA_ART_NOM UNIQUE,
art_tipus VARCHAR2(100) CONSTRAINT CK_ARTISTA_ART_TIPUS CHECK (art_tipus in('Individual','Grupal'))

);

/*Taula Art_grup*/

create table ART_GRUP
(
agp_id VARCHAR2(100) CONSTRAINT FK_ART_GRUP_AGP_ID REFERENCES ARTISTA(art_nom),
agp_data_creacio DATE CONSTRAINT NN_ART_GRUP_DATA NOT NULL,

CONSTRAINT PK_ART_GRUP_AGP_ID PRIMARY KEY (agp_id)
 
);


/*Taula Art_ind*/



create table ART_IND(
aid_id VARCHAR2 (100) CONSTRAINT FK_ART_IND_AID_ID REFERENCES ARTISTA(art_nom),
aid_data_naixement DATE CONSTRAINT NN_ART_IND_DATA NOT NULL,
aid_nacionalitat VARCHAR2(2) CONSTRAINT FK_ART_IND_AID_NACIONALITAT REFERENCES PAIS,

CONSTRAINT PK_ART_IND_AID_ID PRIMARY KEY (aid_id)
);

/*Taula H_Grup*/


create table H_GRUP(
hgr_idartgrup VARCHAR2(100) CONSTRAINT FK_H_GRUP_IDGRUP REFERENCES ART_GRUP,
hgr_idartind  VARCHAR2(100) CONSTRAINT FK_H_GRUP_IDIND REFERENCES ART_IND,
hgr_datainici DATE CONSTRAINT NN_H_GRUP_DATAINICI NOT NULL,
hgr_datafinal DATE CONSTRAINT NN_H_GRUP_DATAFINAL NOT NULL,

CONSTRAINT PK_H_GRUP PRIMARY KEY (hgr_idartgrup,hgr_idartind,hgr_datainici)

);


/*Taula Cataleg*/



create table CATALEG(
cat_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
cat_titol VARCHAR2(100) CONSTRAINT NN_CATALEG_TITOL NOT NULL,
cat_actiu VARCHAR2 (100) CONSTRAINT CK_CATALEG_ACTIU CHECK (cat_actiu in('Actiu','Inactiu')),
cat_estil VARCHAR2 (100) CONSTRAINT FK_CATALEG_CAT_ESTIL REFERENCES ESTIL (est_nom),
cat_tipus CHAR(1) CONSTRAINT CK_CATALEG_CAT_TIPUS CHECK (cat_tipus in ('C','A','L'))


);





/*Taula Canço*/



create table CANÇO(
can_id INTEGER CONSTRAINT FK_CANÇO_CAN_ID REFERENCES CATALEG ON delete cascade,
can_any_creacio INT CONSTRAINT NN_CANÇO_ANY NOT NULL,
can_interpret VARCHAR2(100) CONSTRAINT FK_CANÇO_CAN_INTERPRET REFERENCES ARTISTA(art_nom),
can_durada decimal(5,2) CONSTRAINT NN_CANÇO_DURADA NOT NULL,

CONSTRAINT PK_CANÇO_ID PRIMARY KEY(can_id)

);

/*Taula Autoria*/



create table AUTORIA(
aut_idprod INTEGER CONSTRAINT FK_AUTORIA_AUT_IDCANÇO REFERENCES Cataleg ON DELETE CASCADE,
aut_artid NUMBER CONSTRAINT FK_AUTORIA_AUT_ARTINDID REFERENCES Artista

);

/*Taula Album*/



create table ALBUM(
alb_id INTEGER CONSTRAINT FK_ALBUM_ALB_ID REFERENCES CATALEG ON DELETE CASCADE,
alb_interpret VARCHAR2(100) CONSTRAINT FK_CANÇO_ALB_INTERPRET REFERENCES ARTISTA(art_nom),
alb_anycreacio INT CONSTRAINT NN_ALBUM_ANY NOT NULL,
alb_durada decimal(5,2) CONSTRAINT NN_ALBUM_DURADA NOT NULL,
CONSTRAINT PK_ALBUM_ID PRIMARY KEY(alb_id)
);

/*Taula Album_contingut*/



create table ALBUM_CONT(
abc_idalbum INTEGER CONSTRAINT FK_ALBUM_CONT_IDALBUM REFERENCES Cataleg ON DELETE CASCADE,
abc_idcanço INTEGER CONSTRAINT FK_ALBUM_CONT_IDCANÇO REFERENCES CANÇO on delete cascade,
abc_pos INTEGER CONSTRAINT CH_ALBUM_CONT_POS CHECK (abc_pos >0),

CONSTRAINT PK_ALBUM_ABCIDALBUM_ABCIDCANÇO PRIMARY KEY (abc_idalbum,abc_idcanço),
CONSTRAINT UN_ALBUM_CONTENT_IDALBUM_POS UNIQUE (abc_idalbum,abc_pos)


);

/*Taula Llista*/



create table LLISTA(
lli_id INTEGER CONSTRAINT FK_LLISTA_LLI_ID REFERENCES CATALEG on delete cascade,
lli_durada decimal(5,2) CONSTRAINT NN_LLISTA_DURADA NOT NULL,

CONSTRAINT PK_LLISTA_ID PRIMARY KEY (lli_id)
);


/*Taula Llista_contingut*/



create table LLISTA_CONT(
llc_idllista INTEGER CONSTRAINT FK_LLISTA_LLC_IDLLISTA REFERENCES LLISTA on delete cascade,
llc_idcataleg INTEGER CONSTRAINT FK_LLISTA_LLC_IDCATALEG REFERENCES CATALEG ON DELETE CASCADE,
llc_pos INTEGER CONSTRAINT CH_LLISTA_CONT_POS CHECK (llc_pos >0),
CONSTRAINT UN_LLISTA_CONT_IDLLISTA_POS UNIQUE (llc_idllista,llc_pos),

CONSTRAINT PK_LLISTA_CONT_IDLLISTA_IDCATALEG PRIMARY KEY (llc_idllista,llc_idcataleg)

);

/*Taula Clients*/



create table CLIENTS(
cli_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
cli_email VARCHAR2(100) CONSTRAINT UN_CLIENTS_EMAIL UNIQUE,
cli_nom VARCHAR2 (100) CONSTRAINT NN_CLIENTS_NOM NOT NULL,
cli_cognoms VARCHAR2 (100) CONSTRAINT NN_CLIENTS_COGNOM NOT NULL,
cli_datanaix DATE CONSTRAINT NN_CLIENTS_DATA NOT NULL,
cli_postal NUMBER(5) CONSTRAINT NN_CLIENTS_POSTAL NOT NULL,
cli_d1 VARCHAR2 (100) CONSTRAINT NN_CLIENTS_D1 NOT NULL,
cli_d2 VARCHAR2 (100),
cli_poblacio VARCHAR2 (100) CONSTRAINT NN_CLIENTS_POBLACIO NOT NULL,
cli_pais VARCHAR2(100) CONSTRAINT FK_CLIENTS_PAIS REFERENCES PAIS(pas_nom)

);




/*Taula Reproduccio*/



create table REPRODUCCIO(
rep_id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY,
rep_idclients INTEGER CONSTRAINT FK_REPRODUCCIO_IDCLIENTS REFERENCES CLIENTS,
rep_mt DATE,
rep_idcataleg INTEGER CONSTRAINT FK_REPRODUCCIO_IDCATALEG REFERENCES CATALEG ON DELETE CASCADE,


CONSTRAINT PK_REPRODUCCIO PRIMARY KEY (rep_id)

);


/*---------------------------------------------------------*/

/*INDEX*/
create INDEX IDX_CLIENTS_NOM_COGNOMS on CLIENTS(cli_nom,cli_cognoms);
CREATE INDEX IDX_CATALEG_TITOL ON CATALEG(cat_titol);

/*----------------------------------------------------------*/


/*Triggers*/

create or replace trigger TR_ART_GRUP_DATA_CREACIO
    before insert or update on ART_GRUP 
    for each row 
      declare
        cursor c1 is select art_nom from artista where art_tipus = 'I';
        v_id artista.art_nom%type;
    begin
    open c1;
        loop
            
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
                if(:NEW.agp_id = v_id) then
                    raise_application_error(-20004,'No es poden afegir artistes individuals en aquesta taula de grups');
                end if;
            end loop;
            close c1;
        if(:NEW.agp_data_creacio > sysdate) then
                    raise_application_error(-20004,'La data no pot ser futura');
        end if;
    end;
/
    

create or replace trigger TR_ART_IND_DATA_CREACIO 
    before insert or update on ART_IND 
    for each row
     declare
        cursor c1 is select art_nom from artista where art_tipus = 'G';
        v_id artista.art_nom%type;
    begin
     open c1;
        loop
           
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
                if(:NEW.aid_id = v_id) then
                    raise_application_error(-20005,'No es poden afegir grups en aquesta taula de artistes individuals');
                end if;
            end loop;
            close c1;
        if(:NEW.aid_data_naixement > sysdate) then
                    raise_application_error(-20005,'La data no pot ser futura');
        end if;
    end;
/

create or replace trigger TR_H_GRUP_DATA_INICI_FINAL
    before insert or update on H_GRUP 
    for each row 
    begin
        if(:NEW.hgr_datainici > sysdate) then
            raise_application_error(-20006,'La data de inici no pot ser futura');
        elsif(:NEW.hgr_datafinal < :OLD.hgr_datainici or :NEW.hgr_datafinal < :NEW.hgr_datainici or :OLD.hgr_datafinal < :NEW.hgr_datainici)then
            raise_application_error(-20007,'La data de final no pot ser menor que la de inici');  
        end if;
    end;
/

create or replace trigger TR_CANÇO_ANY_CREACIO
    before insert or update on CANÇO 
    for each row 

    begin

        if(:NEW.can_any_creacio < 0 or :NEW.can_any_creacio >  to_number(to_char(sysdate, 'YYYY'))) then
            raise_application_error(-20008,'El any de la canço no pot ser negatiu ni en el futur');
        end if;
    end;
/
create or replace trigger TR_CANÇO_DURADA
    before insert or update on CANÇO
    for each row 
    begin
        if (:NEW.can_durada <= 0) then
            raise_application_error(-20009,'La durada ha de ser estrictament positiva en cançons');
        
        end if;
    end;

/

create or replace trigger TR_ALBUM_ANY_CREACIO
    before insert or update on ALBUM 
    for each row 

    begin

        if(:NEW.alb_anycreacio < 0 or :NEW.alb_anycreacio >  to_number(to_char(sysdate, 'YYYY'))) then
            raise_application_error(-20010,'El any de la album no pot ser negatiu ni en el futur');
        end if;
    end;
/



create or replace trigger TR_ALBUM_DURADA
    before insert or update on ALBUM
    for each row 
    begin
        if (:NEW.alb_durada < 0) then
            raise_application_error(-20011,'La durada ha de ser  positiva en albums');
        
        end if;
    end;

/

create or replace trigger TR_CANÇO_TIPUS
    before insert or update on CANÇO
    for each row 
    declare 
        cursor c1 is select cat_id from cataleg where cat_tipus='C';
        v_id integer;
        resultat int:=0;
    begin
        open c1;
        
        loop
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
             if(:NEW.can_id = v_id)then
                resultat:=1;
            end if;
        end loop;
        
        close c1;
        
        if (resultat != 1)then
            raise_application_error(-20012,'Nomes cançons');
        end if;
    end;    
/

create or replace trigger TR_ALBUM_TIPUS
    before insert or update of alb_id on ALBUM
    for each row 
    declare 
        cursor c1 is select cat_id from cataleg where cat_tipus='A';
        v_id integer;
        resultat int:=0;
    begin
        open c1;
        
        loop
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
             if(:NEW.alb_id = v_id)then
                resultat:=1;
            end if;
        end loop;
        
        close c1;
        
        if (resultat != 1)then
            raise_application_error(-20013,'Nomes albums');
        end if;
    end;    
/



create or replace trigger TR_LLISTA_TIPUS
    before insert or update on LLISTA
    for each row 
    declare 
        cursor c1 is select cat_id from cataleg where cat_tipus='L';
        v_id integer;
        resultat int:=0;
    begin
        open c1;
        
        loop
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
             if(:NEW.lli_id = v_id)then
                resultat:=1;
            end if;
        end loop;
        
        close c1;
        
        if (resultat != 1)then
            raise_application_error(-20014,'Nomes llistes');
        end if;
    end;    
/

create or replace trigger TR_ALBUM_DURADA_SUMA
after insert or delete or update of abc_idcanço on album_cont
for each row

declare
    v_durada canço.can_durada%type;
   
begin
    if inserting or updating then
        select can_durada into v_durada from CANÇO where can_id = :NEW.abc_idcanço;
        update album set alb_durada = alb_durada + v_durada where alb_id =:NEW.abc_idalbum;

    end if;
  if deleting or updating then
     select can_durada into v_durada from CANÇO where can_id = :OLD.abc_idcanço;
        update album set alb_durada = alb_durada - v_durada where alb_id =:old.abc_idalbum;

  end if;
end;
/

create or replace trigger TR_LLISTA_DURADA
after insert or delete or update of llc_idcataleg
on llista_cont for each row
declare
v_durada number(5,2);
v_tipus cataleg.cat_tipus%type;
begin
if inserting or updating then 
    select cat_tipus into v_tipus from cataleg where cat_id=:new.llc_idcataleg;

 if v_tipus = 'C' THEN
            select CAN_DURADA into v_durada from CANÇO where CAN_ID = :new.llc_idcataleg;
            update llista set lli_durada = lli_durada +v_durada where lli_id = :new.llc_idllista;
end if;

if v_tipus = 'A' THEN
            select alb_DURADA into v_durada from album where alb_ID = :new.llc_idcataleg;
            update llista set lli_durada = lli_durada +v_durada where lli_id = :new.llc_idllista;
end if;
end if;


if deleting or updating then 
    select cat_tipus into v_tipus from cataleg where cat_id=:old.llc_idcataleg;

 if v_tipus = 'C' THEN
            select CAN_DURADA into v_durada from CANÇO where CAN_ID = :old.llc_idcataleg;
            update llista set lli_durada = lli_durada -v_durada where lli_id = :old.llc_idllista;
end if;

if v_tipus = 'A' THEN
            select alb_DURADA into v_durada from album where alb_ID = :old.llc_idcataleg;
            update llista set lli_durada = lli_durada -v_durada where lli_id = :old.llc_idllista;
end if;
end if;


end;
/
create or replace trigger TR_LLISTA_NO_LLISTA
    before insert or update on LLISTA_CONT
    for each row 
    declare 
        cursor c1 is select cat_id from cataleg where cat_tipus='L';
        v_id integer;
      
    begin
        open c1;
        
        loop
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
             if(:NEW.llc_idcataleg = v_id)then
              raise_application_error(-20015,'No pots afegir una llista a una llista');
            end if;
        end loop;
        
        close c1;

    end;    
/

/*create or replace trigger TR_Reproduccions_eliminar
    before delete on cataleg
    for each row 
   declare
   v_id integer;
   resultat integer :=0;
   
   cursor c1 is select rep_idcataleg from reproduccio where rep_idcataleg = :old.cat_id;
   
    begin
    open c1;
        loop
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
            
            if(:old.cat_id=v_id)then
                resultat:=1;
            end if;
        end loop;
    close c1;
        
        if(resultat=1)then
            raise_application_error(-20016,'No pots eliminar un producte que tingui reproduccions');
        end if;
        
    end;
    */
/
create or replace trigger TR_client_eliminar
    before delete on clients
    for each row 
   declare
   v_id integer;
   resultat integer :=0;
   
   cursor c1 is select rep_idcataleg from reproduccio where rep_idclients = :old.cli_id;
   
    begin
    open c1;
        loop
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
            
            if(:old.cli_id=v_id)then
                resultat:=1;
            end if;
        end loop;
    close c1;
        
        if(resultat=1)then
            raise_application_error(-20017,'No pots eliminar un client que tingui reproduccions');
        end if;
        
    end;    
/


create or replace trigger TR_reproduccio_client
    before insert on reproduccio
    for each row 
   declare
   v_id integer;
   resultat integer :=0;
   
   cursor c1 is select cli_id from clients ;
   
    begin
    open c1;
        loop
            fetch c1 into v_id;
            exit when c1%NOTFOUND;
            
            if(:new.rep_idclients=v_id)then
                resultat:=1;
            end if;
        end loop;
    close c1;
        
        if(resultat!=1)then
            raise_application_error(-20018,'No pots posar un client que no existeix ');
        end if;
        
    end;  
 
/

